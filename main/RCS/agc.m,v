head	3.0;
access;
symbols;
locks; strict;
comment	@// @;


3.0
date	2000.06.13.19.19.36;	author gilles;	state Exp;
branches;
next	2.0;

2.0
date	99.05.21.18.45.02;	author mah;	state Exp;
branches;
next	1.5;

1.5
date	99.02.04.15.24.39;	author mah;	state Exp;
branches;
next	1.4;

1.4
date	99.02.04.14.23.12;	author mah;	state Exp;
branches;
next	1.3;

1.3
date	99.01.11.17.16.58;	author mah;	state Exp;
branches;
next	1.2;

1.2
date	99.01.08.15.24.46;	author adam;	state Exp;
branches;
next	1.1;

1.1
date	99.01.06.19.09.00;	author kay;	state Exp;
branches;
next	;


desc
@@


3.0
log
@Release 3
@
text
@function [dataout]=agc(datain,window,type)

%[dataout]=agc(datain,window,type)
%
%This function will do automatic gain control with a running window equation
%on the traces in datain.
%The size of the sliding window is specified by the parameter 'window' in 
%seconds.
%'type' = 1 use absolute values for normalizing
%'type' = 2 use energy values (x^2) for normalizing
%
%written by Kristen Beaty Dec. 1997

%$Id: agc.m,v 2.0 1999/05/21 18:45:02 mah Exp gilles $
%$Log: agc.m,v $
%Revision 2.0  1999/05/21 18:45:02  mah
%Release 2
%
%Revision 1.5  1999/02/04 15:24:39  mah
%fixed problem with energy agc i.e. option 2
%
%Revision 1.4  1999/02/04 14:23:12  mah
%fixed bug
%
%Revision 1.3  1999/01/11 17:16:58  mah
%added comments through out program
%put in error checking for type
%fixed up type 2 method including energy balancing
%optimized program for speed
%fixed up redundancy near end of trace
%,
%
%Revision 1.2  1999/01/08 15:24:46  adam
%Add reset to trace length for large window and fixed boundary error
%
%Revision 1.1  1999/01/06 19:09:00  kay
%Initial revision
%
%
%Copyright (C) 1998 Seismology and Electromagnetic Section/
%Continental Geosciences Division/Geological Survey of Canada
%
%This library is free software; you can redistribute it and/or
%modify it under the terms of the GNU Library General Public
%License as published by the Free Software Foundation; either
%version 2 of the License, or (at your option) any later version.
%
%This library is distributed in the hope that it will be useful,
%but WITHOUT ANY WARRANTY; without even the implied warranty of
%MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%Library General Public License for more details.
%
%You should have received a copy of the GNU Library General Public
%License along with this library; if not, write to the
%Free Software Foundation, Inc., 59 Temple Place - Suite 330,
%Boston, MA  02111-1307, USA.
%
%DSI Consortium
%Continental Geosciences Division
%Geological Survey of Canada
%615 Booth St.
%Ottawa, Ontario
%K1A 0E9
%
%email: dsi@@cg.nrcan.gc.ca

disp('[dataout]=agc(datain,window,type)')

dataout=datain;

tstart=datain.fh{9}; %start time in seconds
int=datain.fh{8}; %sampling interval in seconds
samples=datain.fh{7}; %number of points per trace
nrec=datain.fh{12}; %number of records in datain
w=round(window/int)+1; %convert 'window' from seconds to indexes
pt=round(w/2); %index of point in the centre of the window

% the following checks to see if the window chosen is too large
if w>=samples %error check
   w = samples-1;
   pt=round(w/2);
   ntime = (samples - 1)*int;
   text = sprintf('WARNING! Window has been reset to %8.5f s',ntime);
   disp(text)
end %if

% the following checks to see if the either type 1 or 2 has been chosen

if((type ~=1) & (type ~=2))
   type=1;
   text = sprintf('WARNING! Type has been reset to 1');
   disp(text)
end %if

% the following for loop applies the agc to each record
for COUNT=1:nrec
 % the following applies the method of agc specified by type
 switch type

  case 1 %absolute values
   % first take the absolute value of the data and divide by w to make it faster
   temp=abs(datain.dat{COUNT})/w;
   % first determine the average in the window
   fact=sum(temp(1:w,:));
   facteps=fact+eps; %to get rid of divide by zero problem
   % now apply this to the first half of the window
   factgr=meshgrid(facteps,1:pt); %factgr is a grid of the correction factors
   dataout.dat{COUNT}(1:pt,:)=datain.dat{COUNT}(1:pt,:)./factgr;
   % now apply the agc to the centre portion of the trace using a for loop
   for k=1:samples-w
    % the correction factor fact is being recalculated after each position moved
    fact=fact-temp(k,:)+temp(k+w,:);
    facteps=fact+eps;
    dataout.dat{COUNT}(k+pt,:)=datain.dat{COUNT}(k+pt,:)./facteps;
   end %for

   % now apply this correction factor to the last half of the window
   i=(k+pt+1):samples; %i are the positions that still need to be corrected
   factgr=meshgrid(facteps,i); %factgr is a grid of the correction factors
   dataout.dat{COUNT}(i,:)=datain.dat{COUNT}(i,:)./factgr;

  case 2 %squared values
   % first square the data and divide by w to make it faster
   temp=datain.dat{COUNT}.*datain.dat{COUNT}/w/w;
   % first determine the average in the window
   fact=sum(temp(1:w,:));
   facteps=sqrt(fact+eps); %get rid of divide by zero problem add eps
   % now apply this to the first half of the window
   factgr=meshgrid(facteps,1:pt); %factgr is a grid of the correction factors
   dataout.dat{COUNT}(1:pt,:)=datain.dat{COUNT}(1:pt,:)./factgr;
   % now apply the agc to the centre portion of the trace using a for loop
   for k=1:samples-w
    % the correction factor fact is being recalculated after each position moved
    fact=fact-temp(k,:)+temp(k+w,:);
    facteps=sqrt(fact+eps);
    dataout.dat{COUNT}(k+pt,:)=datain.dat{COUNT}(k+pt,:)./facteps;
   end %for

   % now apply this correction factor to the last half of the window
   i=(k+pt+1):samples; %i are the positions that still need to be corrected
   factgr=meshgrid(facteps,i); %factgr is a grid of the correction factors
   dataout.dat{COUNT}(i,:)=datain.dat{COUNT}(i,:)./factgr;

   % the following balances the energy from trace to trace
   temp=dataout.dat{COUNT}.*dataout.dat{COUNT};
   fact=sum(temp);
   fact=sqrt(fact);
   i=find(fact==0);
   fact(i)=1; %avoid divide by zero error for dead traces
   factgr=meshgrid(fact,1:samples);
   dataout.dat{COUNT}=dataout.dat{COUNT}./factgr; %applies the correction
  end %type

end %loop over records
@


2.0
log
@Release 2
@
text
@d14 1
a14 1
%$Id: agc.m,v 1.5 1999/02/04 15:24:39 mah Exp mah $
d16 3
@


1.5
log
@fixed problem with energy agc i.e. option 2
@
text
@d14 1
a14 1
%$Id: agc.m,v 1.4 1999/02/04 14:23:12 mah Exp mah $
d16 3
@


1.4
log
@fixed bug
@
text
@d14 1
a14 1
%$Id: agc.m,v 1.3 1999/01/11 17:16:58 mah Exp mah $
d16 3
d118 1
a118 1
   temp=datain.dat{COUNT}.*datain.dat{COUNT}/w;
d121 1
a121 1
   facteps=fact+eps; %get rid of divide by zero problem
d129 1
a129 1
    facteps=fact+eps;
@


1.3
log
@added comments through out program
put in error checking for type
fixed up type 2 method including energy balancing
optimized program for speed
fixed up redundancy near end of trace
,
@
text
@d14 1
a14 1
%$Id: agc.m,v 1.2 1999/01/08 15:24:46 adam Exp $
d16 8
d96 1
d98 1
a98 1
   factgr=meshgrid(fact,1:pt); %factgr is a grid of the correction factors
d104 2
a105 1
    dataout.dat{COUNT}(k+pt,:)=datain.dat{COUNT}(k+pt,:)./fact;
d110 1
a110 1
   factgr=meshgrid(fact,i); %factgr is a grid of the correction factors
d118 1
d120 1
a120 1
   factgr=meshgrid(fact,1:pt); %factgr is a grid of the correction factors
d126 2
a127 1
    dataout.dat{COUNT}(k+pt,:)=datain.dat{COUNT}(k+pt,:)./fact;
d132 1
a132 1
   factgr=meshgrid(fact,i); %factgr is a grid of the correction factors
@


1.2
log
@Add reset to trace length for large window and fixed boundary error
@
text
@d13 2
a14 1
%$Id: agc.m,v 1.1 1999/01/06 19:09:00 kay Exp adam $
d16 3
d21 28
a49 1

d57 2
a58 2
%convert 'window' from seconds to indexes
w=round(window./int)+1;
d61 2
a62 4
if w==samples
   pt=samples-1;
   w = samples -1;
elseif w>samples %error check
d64 1
a64 1
   pt = samples -1;
d66 1
a66 1
   text = sprintf('Window has been reset to %8.5f s',ntime);
d68 1
a68 1
end %if/else
d70 1
a70 1
nrec=datain.fh{12}; %number of records in datain
d72 7
d80 1
d84 6
a89 2
   fact=sum(abs(datain.dat{COUNT}(1:w,:)))./w;
   factgr=meshgrid(fact,1:pt);
d91 1
d93 2
a94 1
    fact=fact-abs(datain.dat{COUNT}(k,:))./w+abs(datain.dat{COUNT}(k+w,:))./w;
d98 5
d104 8
a111 3
   fact=sum(datain.dat{COUNT}(1:w,:).*datain.dat{COUNT}(1:w,:))./w;
   factgr=meshgrid(fact,1:pt);
   dataout.dat{COUNT}(i,:)=datain.dat{COUNT}(i,:)./factgr;
d113 2
a114 2
    fact=fact-datain.dat{COUNT}(k,:).*datain.dat{COUNT}(k,:)./w;
    fact=fact+datain.dat{COUNT}(k+w,:).*datain.dat{COUNT}(k+w,:)./w;
d117 16
a132 4
 end %case
 i=k+1:samples;
 factgr=meshgrid(fact,i);
 dataout.dat{COUNT}(i,:)=datain.dat{COUNT}(i,:)./factgr;
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
%The size of the sliding window is specified by the parameter 'window' in
a11 1
%DSI customized VSP processing software
d13 4
a17 29
%$Id:$
%$Log:$
%
%Copyright (C) 1998 Seismology and Electromagnetic Section/
%Continental Geosciences Division/Geological Survey of Canada
%
%This library is free software; you can redistribute it and/or
%modify it under the terms of the GNU Library General Public
%License as published by the Free Software Foundation; either
%version 2 of the License, or (at your option) any later version.
%
%This library is distributed in the hope that it will be useful,
%but WITHOUT ANY WARRANTY; without even the implied warranty of
%MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%Library General Public License for more details.
%
%You should have received a copy of the GNU Library General Public
%License along with this library; if not, write to the
%Free Software Foundation, Inc., 59 Temple Place - Suite 330,
%Boston, MA  02111-1307, USA.
%
%DSI Consortium
%Continental Geosciences Division
%Geological Survey of Canada
%615 Booth St.
%Ottawa, Ontario
%K1A 0E9
%
%email: dsi@@cg.nrcan.gc.ca
d31 2
a32 1
 pt=samples;
d34 5
a38 1
 error('choose a smaller window')
@
